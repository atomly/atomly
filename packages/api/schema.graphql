type Post {
  id: ID!
  memberId: ID!
  header: String
  body: String
}

type Query {
  posts: [Post]
  post(id: ID!): Post
  test: String!
  ping: String!
  users: [User]
  user(id: ID!): User
  me: User
}

input NewPostInput {
  memberId: ID!
  header: String!
  body: String!
}

type Mutation {
  newPost(input: NewPostInput!): Post
  newUser(input: NewUserInput!): User
  authenticate(input: AuthenticateInput!): User
  logout: Boolean!
}

type Subscription {
  newPostSubscription: Post!
  hello(name: String!): String!
}

type User {
  id: ID!
  email: ID!
  posts: [Post]
}

input NewUserInput {
  email: String!
  password: String!
}

input AuthenticateInput {
  email: String!
  password: String!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
,[object Object],type Post {
  id: ID!
  memberId: ID!
  header: String
  body: String
}

type Query {
  posts: [Post]
  post(id: ID!): Post
  test: String!
  ping: String!
  users: [User]
  user(id: ID!): User
  me: User
}

input NewPostInput {
  memberId: ID!
  header: String!
  body: String!
}

type Mutation {
  newPost(input: NewPostInput!): Post
  newUser(input: NewUserInput!): User
  authenticate(input: AuthenticateInput!): User
  logout: Boolean!
}

type Subscription {
  newPostSubscription: Post!
  hello(name: String!): String!
}

type User {
  id: ID!
  email: ID!
  posts: [Post]
}

input NewUserInput {
  email: String!
  password: String!
}

input AuthenticateInput {
  email: String!
  password: String!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
